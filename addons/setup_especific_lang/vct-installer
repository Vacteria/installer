#!/bin/bash

MYHOME="$(pwd)"
MYSELF="vct-installer"
MYROOT="/mnt/rootfs"
MYDB="/tmp/install.db"
MYLOG="/tmp/install.log"
MYDISKDG="/tmp/disk.dg"
MYBLKDG="/tmp/block.dg"
MYEDITDG="/tmp/blkedit.dg"
MYBITE="1000"

#
# Export i18n envirnoment vairables
#
export TEXTDOMAINDIR="${MYHOME}"
export TEXTDOMAIN="${MYNAME}"

. ${MYHOME}/messages
. ${MYHOME}/common

include "dialogs"
include "database"
include "block"

{
	[ -f "${MYLOG}" ] && rm -f ${MYLOG}

	cat <<EOF
XXX
20
$(gettext 'Flush install database')
XXX
EOF
	flush_database || exit 1


	cat <<EOF
XXX
40
$(gettext 'Cleanning rootfs mountages')
XXX
EOF
	umount_all || exit 1

	cat <<EOF
XXX
60
$(gettext 'Recreate database if does not exist')
XXX
EOF
	create_database || gui_die "$(gettext 'Failed to database creation')"
	sql "INSERT OR IGNORE INTO Settings VALUES(null,'${NONE}','${NONE}','${NONE}','${NONE}','${NONE}','${NONE}','${NONE}','${NONE}')"
	sql "INSERT OR IGNORE INTO Users (id_user,name) VALUES(0,'root')"

	cat <<EOF
XXX
90
$(gettext 'Processing block devices on system')
XXX
EOF
	search_block_devices


	cat <<EOF
XXX
100
$(gettext 'Rendering...')
XXX
EOF

	sleep 1

} | dialog "$(gettext "Loading")" --gauge "$(gettext 'loading installer. Please wait')" 10 70 0 || exit 1


#if ! check_hard_disk
#then
#	gui_die "$(gettext 'This system have not any usable hard disk')"
#fi

#if ! check_install_media
#then
#	gui_die "$(gettext 'This system have not any usable install media')"
#fi

main()
{
	log "$(gettext 'Calling main()')"

	ACTION="$(print_main_menu)"

	case $? in 
		3 )
			log_action_selected "INSTALL"
			include "install"
		;;
		1 ) 
			#gui_yesno "$(gettext 'You relly want exit of installer ?')"
			#if [ $? == "0" ]
			#then
			#	flush_database
			#	umount_all
				return 0
			#fi
		;;
		0 )
			case ${ACTION} in
				1 )
					log_action_selected "1(partitioning)"
					DISK_TO_PART=$(print_dsk_dg)
					if [ "${?}" == "0" ]
					then
						if [ -n "${DISK_TO_PART}" ]
						then
							log_block_selected "${DISK_TO_PART}"
							open_parter ${DISK_TO_PART}
						fi
					fi
				;;
				2 )
					log_action_selected "2(Partitions definition)"
					assign_partitions
				;;
				3 )
					log_action_selected "3(Installation type)"
					INS_TYPE=$(print_ins_dg)
					if [ "$?" == "0" ]
					then
						sql "UPDATE Settings SET profile='${INS_TYPE}'"
					fi
				;;
				4 )
					log_action_selected "4(Users setup)"
					set_passwd 'root'
					user_setup
				;;
				5 )
					SYS_LOCALES=$(select_locales)
					if [ "$?" == "0" ]
					then
						sql "UPDATE Settings SET locales='${SYS_LOCALES}' WHERE id_config='1'"
						set -- ${SYS_LOCALES}
						if [ "${#@}" -gt "1" ]
						then
							DEF_LANG=$(set_default_lang ${SYS_LOCALES})
						else
							DEF_LANG="${SYS_LOCALES}"
						fi
						sql "UPDATE Settings SET language='${DEF_LANG}' WHERE id_config='1'"
					fi
					
					CONSOLE_KBD="$(set_keyboard)"
					CONSOLE_KBD="${CONSOLE_KBD:-default}"
					sql "UPDATE Settings SET keyboard='${CONSOLE_KBD}' WHERE id_config='1'"
					
					HWCLOCK=$(print_hwclock_dg)
					HWCLOCK="${HWCLOCK:-utc}"
					sql "UPDATE Settings SET hwclock='${HWCLOCK}' WHERE id_config='1'"
					
					ZONEINFO=$(set_zoneinfo)
					if [ "$?" == "0" ]
					then
						sql "UPDATE Settings SET zoneinfo='${ZONEINFO}' WHERE id_config='1'"
					fi
				;;
				6 )
					BOOTLOADER="$(print_loader_dg)"
					BOOTLOADER="${BOOTLOADER:-mbr}"
					sql "UPDATE Settings SET bootloader='${BOOTLOADER}' WHERE id_config='1'"
				;;
			esac
		;;
	esac
	
	main
	return 0
}
main
exit $?
